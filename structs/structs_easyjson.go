// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	field "github.com/ip-api/cache/field"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs(in *jlexer.Lexer, out *Responses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Responses, 0, 1)
			} else {
				*out = Responses{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Response
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs(out *jwriter.Writer, in Responses) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Responses) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Responses) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Responses) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Responses) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs(l, v)
}
func easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs1(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "continent":
			out.Continent = string(in.String())
		case "continentCode":
			out.ContinentCode = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "countryCode":
			out.CountryCode = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "regionName":
			out.RegionName = string(in.String())
		case "city":
			out.City = string(in.String())
		case "district":
			out.District = string(in.String())
		case "zip":
			out.Zip = string(in.String())
		case "lat":
			out.Lat = float64(in.Float64())
		case "lon":
			out.Lon = float64(in.Float64())
		case "timezone":
			out.Timezone = string(in.String())
		case "offset":
			out.Offset = int(in.Int())
		case "currency":
			out.Currency = string(in.String())
		case "isp":
			out.ISP = string(in.String())
		case "org":
			out.Org = string(in.String())
		case "as":
			out.AS = string(in.String())
		case "asname":
			out.ASName = string(in.String())
		case "reverse":
			out.Reverse = string(in.String())
		case "mobile":
			if in.IsNull() {
				in.Skip()
				out.Mobile = nil
			} else {
				if out.Mobile == nil {
					out.Mobile = new(bool)
				}
				*out.Mobile = bool(in.Bool())
			}
		case "proxy":
			if in.IsNull() {
				in.Skip()
				out.Proxy = nil
			} else {
				if out.Proxy == nil {
					out.Proxy = new(bool)
				}
				*out.Proxy = bool(in.Bool())
			}
		case "hosting":
			if in.IsNull() {
				in.Skip()
				out.Hosting = nil
			} else {
				if out.Hosting == nil {
					out.Hosting = new(bool)
				}
				*out.Hosting = bool(in.Bool())
			}
		case "message":
			out.Message = string(in.String())
		case "query":
			out.Query = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs1(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != "" {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	if in.Continent != "" {
		const prefix string = ",\"continent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Continent))
	}
	if in.ContinentCode != "" {
		const prefix string = ",\"continentCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContinentCode))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.CountryCode != "" {
		const prefix string = ",\"countryCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CountryCode))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	if in.RegionName != "" {
		const prefix string = ",\"regionName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RegionName))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.District != "" {
		const prefix string = ",\"district\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.District))
	}
	if in.Zip != "" {
		const prefix string = ",\"zip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Zip))
	}
	if in.Lat != 0 {
		const prefix string = ",\"lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lat))
	}
	if in.Lon != 0 {
		const prefix string = ",\"lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lon))
	}
	if in.Timezone != "" {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Timezone))
	}
	if in.Offset != 0 {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Offset))
	}
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Currency))
	}
	if in.ISP != "" {
		const prefix string = ",\"isp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ISP))
	}
	if in.Org != "" {
		const prefix string = ",\"org\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Org))
	}
	if in.AS != "" {
		const prefix string = ",\"as\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AS))
	}
	if in.ASName != "" {
		const prefix string = ",\"asname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ASName))
	}
	if in.Reverse != "" {
		const prefix string = ",\"reverse\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Reverse))
	}
	if in.Mobile != nil {
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Mobile))
	}
	if in.Proxy != nil {
		const prefix string = ",\"proxy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Proxy))
	}
	if in.Hosting != nil {
		const prefix string = ",\"hosting\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Hosting))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.Query != "" {
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Query))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs1(l, v)
}
func easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs2(in *jlexer.Lexer, out *CacheEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.IP = string(in.String())
		case "lang":
			out.Lang = string(in.String())
		case "fields":
			out.Fields = field.Fields(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs2(out *jwriter.Writer, in CacheEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		out.Int(int(in.Fields))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CacheEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CacheEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CacheEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CacheEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs2(l, v)
}
func easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs3(in *jlexer.Lexer, out *CacheEntries) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(CacheEntries, 0, 8)
			} else {
				*out = CacheEntries{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 *CacheEntry
			if in.IsNull() {
				in.Skip()
				v4 = nil
			} else {
				if v4 == nil {
					v4 = new(CacheEntry)
				}
				(*v4).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs3(out *jwriter.Writer, in CacheEntries) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			if v6 == nil {
				out.RawString("null")
			} else {
				(*v6).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v CacheEntries) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CacheEntries) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComErikdubbelboerApiApiProxyStructs3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CacheEntries) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CacheEntries) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComErikdubbelboerApiApiProxyStructs3(l, v)
}
