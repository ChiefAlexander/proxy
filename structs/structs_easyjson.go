// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	field "github.com/ip-api/proxy/field"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComIpApiCacheStructs(in *jlexer.Lexer, out *Responses) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Responses, 0, 1)
			} else {
				*out = Responses{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Response
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComIpApiCacheStructs(out *jwriter.Writer, in Responses) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Responses) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComIpApiCacheStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Responses) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComIpApiCacheStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Responses) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComIpApiCacheStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Responses) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComIpApiCacheStructs(l, v)
}
func easyjson6a975c40DecodeGithubComIpApiCacheStructs1(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(string)
				}
				*out.Status = string(in.String())
			}
		case "continent":
			if in.IsNull() {
				in.Skip()
				out.Continent = nil
			} else {
				if out.Continent == nil {
					out.Continent = new(string)
				}
				*out.Continent = string(in.String())
			}
		case "continentCode":
			if in.IsNull() {
				in.Skip()
				out.ContinentCode = nil
			} else {
				if out.ContinentCode == nil {
					out.ContinentCode = new(string)
				}
				*out.ContinentCode = string(in.String())
			}
		case "country":
			if in.IsNull() {
				in.Skip()
				out.Country = nil
			} else {
				if out.Country == nil {
					out.Country = new(string)
				}
				*out.Country = string(in.String())
			}
		case "countryCode":
			if in.IsNull() {
				in.Skip()
				out.CountryCode = nil
			} else {
				if out.CountryCode == nil {
					out.CountryCode = new(string)
				}
				*out.CountryCode = string(in.String())
			}
		case "region":
			if in.IsNull() {
				in.Skip()
				out.Region = nil
			} else {
				if out.Region == nil {
					out.Region = new(string)
				}
				*out.Region = string(in.String())
			}
		case "regionName":
			if in.IsNull() {
				in.Skip()
				out.RegionName = nil
			} else {
				if out.RegionName == nil {
					out.RegionName = new(string)
				}
				*out.RegionName = string(in.String())
			}
		case "city":
			if in.IsNull() {
				in.Skip()
				out.City = nil
			} else {
				if out.City == nil {
					out.City = new(string)
				}
				*out.City = string(in.String())
			}
		case "district":
			if in.IsNull() {
				in.Skip()
				out.District = nil
			} else {
				if out.District == nil {
					out.District = new(string)
				}
				*out.District = string(in.String())
			}
		case "zip":
			if in.IsNull() {
				in.Skip()
				out.Zip = nil
			} else {
				if out.Zip == nil {
					out.Zip = new(string)
				}
				*out.Zip = string(in.String())
			}
		case "lat":
			if in.IsNull() {
				in.Skip()
				out.Lat = nil
			} else {
				if out.Lat == nil {
					out.Lat = new(float64)
				}
				*out.Lat = float64(in.Float64())
			}
		case "lon":
			if in.IsNull() {
				in.Skip()
				out.Lon = nil
			} else {
				if out.Lon == nil {
					out.Lon = new(float64)
				}
				*out.Lon = float64(in.Float64())
			}
		case "timezone":
			if in.IsNull() {
				in.Skip()
				out.Timezone = nil
			} else {
				if out.Timezone == nil {
					out.Timezone = new(string)
				}
				*out.Timezone = string(in.String())
			}
		case "offset":
			if in.IsNull() {
				in.Skip()
				out.Offset = nil
			} else {
				if out.Offset == nil {
					out.Offset = new(int)
				}
				*out.Offset = int(in.Int())
			}
		case "currency":
			if in.IsNull() {
				in.Skip()
				out.Currency = nil
			} else {
				if out.Currency == nil {
					out.Currency = new(string)
				}
				*out.Currency = string(in.String())
			}
		case "isp":
			if in.IsNull() {
				in.Skip()
				out.ISP = nil
			} else {
				if out.ISP == nil {
					out.ISP = new(string)
				}
				*out.ISP = string(in.String())
			}
		case "org":
			if in.IsNull() {
				in.Skip()
				out.Org = nil
			} else {
				if out.Org == nil {
					out.Org = new(string)
				}
				*out.Org = string(in.String())
			}
		case "as":
			if in.IsNull() {
				in.Skip()
				out.AS = nil
			} else {
				if out.AS == nil {
					out.AS = new(string)
				}
				*out.AS = string(in.String())
			}
		case "asname":
			if in.IsNull() {
				in.Skip()
				out.ASName = nil
			} else {
				if out.ASName == nil {
					out.ASName = new(string)
				}
				*out.ASName = string(in.String())
			}
		case "reverse":
			if in.IsNull() {
				in.Skip()
				out.Reverse = nil
			} else {
				if out.Reverse == nil {
					out.Reverse = new(string)
				}
				*out.Reverse = string(in.String())
			}
		case "mobile":
			if in.IsNull() {
				in.Skip()
				out.Mobile = nil
			} else {
				if out.Mobile == nil {
					out.Mobile = new(bool)
				}
				*out.Mobile = bool(in.Bool())
			}
		case "proxy":
			if in.IsNull() {
				in.Skip()
				out.Proxy = nil
			} else {
				if out.Proxy == nil {
					out.Proxy = new(bool)
				}
				*out.Proxy = bool(in.Bool())
			}
		case "hosting":
			if in.IsNull() {
				in.Skip()
				out.Hosting = nil
			} else {
				if out.Hosting == nil {
					out.Hosting = new(bool)
				}
				*out.Hosting = bool(in.Bool())
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(string)
				}
				*out.Message = string(in.String())
			}
		case "query":
			if in.IsNull() {
				in.Skip()
				out.Query = nil
			} else {
				if out.Query == nil {
					out.Query = new(string)
				}
				*out.Query = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComIpApiCacheStructs1(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Status != nil {
		const prefix string = ",\"status\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Status))
	}
	if in.Continent != nil {
		const prefix string = ",\"continent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Continent))
	}
	if in.ContinentCode != nil {
		const prefix string = ",\"continentCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ContinentCode))
	}
	if in.Country != nil {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Country))
	}
	if in.CountryCode != nil {
		const prefix string = ",\"countryCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.CountryCode))
	}
	if in.Region != nil {
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Region))
	}
	if in.RegionName != nil {
		const prefix string = ",\"regionName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RegionName))
	}
	if in.City != nil {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.City))
	}
	if in.District != nil {
		const prefix string = ",\"district\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.District))
	}
	if in.Zip != nil {
		const prefix string = ",\"zip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Zip))
	}
	if in.Lat != nil {
		const prefix string = ",\"lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.Lat))
	}
	if in.Lon != nil {
		const prefix string = ",\"lon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.Lon))
	}
	if in.Timezone != nil {
		const prefix string = ",\"timezone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Timezone))
	}
	if in.Offset != nil {
		const prefix string = ",\"offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(*in.Offset))
	}
	if in.Currency != nil {
		const prefix string = ",\"currency\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Currency))
	}
	if in.ISP != nil {
		const prefix string = ",\"isp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ISP))
	}
	if in.Org != nil {
		const prefix string = ",\"org\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Org))
	}
	if in.AS != nil {
		const prefix string = ",\"as\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.AS))
	}
	if in.ASName != nil {
		const prefix string = ",\"asname\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ASName))
	}
	if in.Reverse != nil {
		const prefix string = ",\"reverse\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Reverse))
	}
	if in.Mobile != nil {
		const prefix string = ",\"mobile\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Mobile))
	}
	if in.Proxy != nil {
		const prefix string = ",\"proxy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Proxy))
	}
	if in.Hosting != nil {
		const prefix string = ",\"hosting\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Hosting))
	}
	if in.Message != nil {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Message))
	}
	if in.Query != nil {
		const prefix string = ",\"query\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Query))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComIpApiCacheStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComIpApiCacheStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComIpApiCacheStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComIpApiCacheStructs1(l, v)
}
func easyjson6a975c40DecodeGithubComIpApiCacheStructs2(in *jlexer.Lexer, out *CacheEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "query":
			out.IP = string(in.String())
		case "lang":
			out.Lang = string(in.String())
		case "fields":
			out.Fields = field.Fields(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComIpApiCacheStructs2(out *jwriter.Writer, in CacheEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"fields\":"
		out.RawString(prefix)
		out.Int(int(in.Fields))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CacheEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComIpApiCacheStructs2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CacheEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComIpApiCacheStructs2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CacheEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComIpApiCacheStructs2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CacheEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComIpApiCacheStructs2(l, v)
}
func easyjson6a975c40DecodeGithubComIpApiCacheStructs3(in *jlexer.Lexer, out *CacheEntries) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(CacheEntries, 0, 8)
			} else {
				*out = CacheEntries{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 *CacheEntry
			if in.IsNull() {
				in.Skip()
				v4 = nil
			} else {
				if v4 == nil {
					v4 = new(CacheEntry)
				}
				(*v4).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComIpApiCacheStructs3(out *jwriter.Writer, in CacheEntries) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			if v6 == nil {
				out.RawString("null")
			} else {
				(*v6).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v CacheEntries) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComIpApiCacheStructs3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CacheEntries) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComIpApiCacheStructs3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CacheEntries) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComIpApiCacheStructs3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CacheEntries) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComIpApiCacheStructs3(l, v)
}
